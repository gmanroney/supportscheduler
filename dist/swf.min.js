/*! swf 06-12-2017 */

function getEngineerIDs(){return Engineer.find({},{empid:1,_id:0})}var express=require("express"),app=express(),bodyParser=require("body-parser"),mongoose=require("mongoose"),path=require("path"),config=require("./config.json");require("moment"),mongoose.set("debug",!0),app.use(bodyParser.urlencoded({extended:!0})),app.use(bodyParser.json());var port=process.env.PORT||3e3;mongoose.Promise=global.Promise,mongoose.connect("mongodb://"+config.mongodb.host+":"+config.mongodb.port+"/"+config.mongodb.db,{useMongoClient:!0}),app.use(express.static(path.join(__dirname,"../public")));var router=express.Router();app.use("/api",router),app.listen(port),console.log("Server listening on port "+port);var Engineer=require("../models/engineer"),Schedule=require("../models/schedule"),SwfFn=require("../functions/supportSched_functions.js");router.use(function(e,n,o){console.log("Request received"),o()}),router.get("/",function(e,n){n.json({message:"Welcome to the API"})}),router.route("/engineers").post(function(e,n){Engineer.count({},function(e,n){console.log("Number of docs: ",n),n>10&&console.log("More than 10 engineers now; the 10 most senior engineers will be scheduled")});var o=new Engineer;o.fname=e.body.fname,o.lname=e.body.lname,o.gender=e.body.gender,o.empid=e.body.empid,o.dob=e.body.dob,o.start=e.body.start,o.save(function(e){e&&n.send(e),n.json({message:"Engineer record created"})})}).get(function(e,n){Engineer.find(function(e,o){e&&n.send(e),n.json(o)})}),router.route("/engineers/id/:engineer_id").get(function(e,n){Engineer.findById(e.params.engineer_id,function(e,o){e&&n.send(e),n.json(o)})}),router.route("/engineers/gender/:gender").get(function(e,n){Engineer.find({gender:e.params.gender},function(e,o){e&&n.send(e),n.json(o)})}),router.route("/engineers/:empid").get(function(e,n){Engineer.find({empid:e.params.empid},function(e,o){e&&n.send(e),n.json(o)})}).delete(function(e,n){Engineer.remove({empid:e.params.empid},function(e,o){e&&n.send(e),n.json(o)})}),router.route("/schedules/").get(function(e,n){Schedule.find(function(e,o){e&&n.send(e),n.json(o),console.log("Schedule GET (all) Completed")})}),router.route("/schedules/id/:schedule_id").get(function(e,n){Schedule.findById(e.params.schedule_id,function(e,o){e&&n.send(e),n.json(o),console.log("Schedule GET (schedule_id) Completed")})}),router.route("/schedules/empid/:empid").get(function(e,n){console.log(e.params.empid),Schedule.find({empid:e.params.empid},function(e,o){e&&n.send(e),n.json(o),console.log("Schedule GET (empid) Completed")})}),router.route("/schedules/date/:date").get(function(e,n){Schedule.find({date:e.params.date},function(e,o){e&&n.send(e),n.json(o),console.log("Schedule GET (date) Completed")})}),router.route("/schedules/:schedule_year/:schedule_period").post(function(e,n){getEngineerIDs().exec(function(n,o){if(n)return console.log(n);var r=SwfFn.populateCalendar(SwfFn.assignEngineers(o),+e.params.schedule_year,e.params.schedule_period);0==r.length&&console.log("Schedule not generated");for(var s in r)console.log("[received]",r[s].date,r[s].empid,r[s].shift,r[s].ymd),Schedule.findOneAndUpdate({ymd:r[s].ymd,shift:r[s].shift},r[s],{upsert:!0,new:!0,runValidators:!0},function(e,n){e&&n.send(e)})}),console.log("Schedule POST(year/weekstart) Completed"),n.json({message:"Schedule POST (year/weekstart) Completed"})}).get(function(e,n){Schedule.find({$and:[{yr:e.params.schedule_year},{wn:{$in:[e.params.schedule_period,parseInt(e.params.schedule_period)+1]}}]},function(e,o){e&&n.send(e),n.json(o),console.log("Schedule GET(year/weekstart) Completed")})}).delete(function(e,n){Schedule.remove({$and:[{yr:e.params.schedule_year},{wn:{$in:[e.params.schedule_period,parseInt(e.params.schedule_period)+1]}}]},function(e,o){e&&n.send(e),console.log("Schedule DELETE(year/weekstart) Completed"),n.json({message:"Schedule DELETE(year/weekstart) Completed"})})});