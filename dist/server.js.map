{"version":3,"sources":["../src/server.js"],"names":["express","require","app","bodyParser","mongoose","path","config","set","console","log","use","urlencoded","extended","json","port","process","env","PORT","Promise","global","connect","mongodb","host","db","useMongoClient","static","join","__dirname","router","Router","listen","Engineer","Schedule","SwfFn","req","res","next","get","message","route","post","count","err","engineer","fname","body","lname","gender","empid","dob","start","save","send","find","findById","params","engineer_id","delete","remove","schedule","schedule_id","date","query","getEngineerIDs","exec","records","results","populateCalendar","assignEngineers","schedule_year","schedule_period","length","findOneAndUpdate","ymd","shift","upsert","new","runValidators","$and","yr","wn","$in","parseInt","_id"],"mappings":"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","file":"server.js","sourcesContent":["// Import packages and initiate express app\nvar express = require('express');\nvar app = express();\nvar bodyParser = require('body-parser');\nvar mongoose = require('mongoose');\nvar path = require('path');\nvar config = require('../config/default.json');\n\nrequire('moment');\nmongoose.set('debug', true);\n//var currentWeekNumber = require('current-week-number');\nconsole.log('xxxx');\n// Configure app for bodyParser() to let us grab data from the body of POST\napp.use(bodyParser.urlencoded({extended: true}));\napp.use(bodyParser.json());\n\n// Setup port for server to listen on (use PORT or 3000 if PORT not set)\nvar port = process.env.PORT || 3000;\n\n// Connecte to MongoDB\nmongoose.Promise = global.Promise;\nmongoose.connect('mongodb://' + config.mongodb.host + ':' + config.mongodb.port + '/' + config.mongodb.db ,{ useMongoClient: true });\n\n// Add path to static content (HTML homepage) for Single Page Application (SPA) that will serve SWF content\n// Express will by default look for index.html if it is not supplied i.e. localhost:3000\napp.use(express.static(path.join(__dirname, '../public')));\n\n// Setup API routes (all to be prefixed with /api). All functions generated by router will be applied to our application\nvar router = express.Router();\napp.use('/api',router);\n\n// Start the server (environment variable or port 3000 if not defined)\napp.listen(port);\nconsole.log('Server listening on port ' + port);\n\n\n// ------------------------- BASIC SERVER CREATED --------------------- //\n\n// Add in schema objects\nvar Engineer = require ('../models/engineer');\nvar Schedule = require ('../models/schedule');\n\n// Add in bespoke functions for application\nvar SwfFn = require(\"../functions/supportSched_functions.js\");\n\n// Middleware - useful for validation, logging or stopping request from cotinuing in event request is not safe\nrouter.use(function(req,res,next) {\n    console.log('Request received');\n    //app.use(express.static(path.join(__dirname, 'public')));\n     // move on to route; if not there request stops here.\n    next();\n});\n\n// Test Route (to see if everything is running)\nrouter.get('/', function(req,res) {\n  res.json({message: 'Welcome to the API'});\n});\n\n// ------------------------- API for Engineer --------------------- //\n// create engineer and get all engineers\nrouter.route('/engineers')\n\n  .post(function(req,res)\n  {\n    // Count number of records\n    Engineer.count({}, function(err, count)\n    {\n      console.log( \"Number of docs: \", count );\n      if (count > 10)\n      {\n        console.log(\"More than 10 engineers now; the 10 most senior engineers will be scheduled\" );\n      }\n    });\n    // create record\n    var engineer = new Engineer();\n    engineer.fname = req.body.fname;\n    engineer.lname = req.body.lname;\n    engineer.gender = req.body.gender;\n    engineer.empid = req.body.empid;\n    engineer.dob = req.body.dob;\n    engineer.start = req.body.start;\n\n    // save record\n    engineer.save(function(err)\n    {\n      // if error on save  output error otherwise print confirmation note\n      if (err)\n      {\n        res.send(err);\n      }\n      res.json({ message: \"Engineer record created\"});\n    });\n  })\n\n  .get(function(req,res)\n  {\n    Engineer.find(function(err,engineer)\n    {\n      if (err)\n      {\n        res.send(err);\n      }\n      res.json(engineer);\n    });\n  });\n\n// get engineer based on mongo ID\nrouter.route('/engineers/id/:engineer_id')\n\n  .get(function(req,res)\n  {\n    Engineer.findById(req.params.engineer_id,function(err,engineer)\n    {\n      if (err)\n      {\n        res.send(err);\n      }\n      res.json(engineer);\n    });\n  });\n\n// get engineer based on gender\nrouter.route('/engineers/gender/:gender')\n\n  .get(function(req,res)\n  {\n    // need to match attribute make in d/b to parameter in function; implicit for the _id lookup\n    Engineer.find({gender:req.params.gender},function(err,engineer)\n    {\n      if (err)\n      {\n        res.send(err);\n      }\n      res.json(engineer);\n    });\n  });\n\n// get or delete engineer based on employee ID\nrouter.route('/engineers/:empid')\n  .get(function(req,res)\n  {\n    Engineer.find({empid:req.params.empid},function(err,engineer)\n    {\n      if (err)\n      {\n        res.send(err);\n      }\n      res.json(engineer);\n    });\n  })\n\n  .delete(function(req,res)\n  {\n    Engineer.remove({empid:req.params.empid},function(err,engineer)\n    {\n      if (err)\n      {\n        res.send(err);\n      }\n      res.json(engineer);\n    });\n  });\n\n// ------------------------- API for Schedule --------------------- //\n\n// get entire schedule\nrouter.route('/schedules/')\n  .get(function(req,res)\n  {\n    Schedule.find(function(err,schedule)\n    {\n      if (err)\n      {\n        res.send(err);\n      }\n      res.json(schedule);\n      console.log('Schedule GET (all) Completed');\n    });\n  });\n\n// get schedule based on mongo ID\nrouter.route('/schedules/id/:schedule_id')\n  .get(function(req,res)\n  {\n    Schedule.findById(req.params.schedule_id,function(err,schedule)\n    {\n      if (err)\n      {\n        res.send(err);\n      }\n      res.json(schedule);\n      console.log('Schedule GET (schedule_id) Completed');\n    });\n  });\n\n// get engineer based on employ ee ID\nrouter.route('/schedules/empid/:empid')\n  .get(function(req,res)\n  {\n    Schedule.find({empid:req.params.empid},function(err,schedule)\n    {\n      if (err)\n      {\n        res.send(err);\n      }\n      res.json(schedule);\n      console.log('Schedule GET (empid) Completed');\n    });\n  });\n\n// get schedule based on date\nrouter.route('/schedules/date/:date')\n  .get(function(req,res)\n  {\n    Schedule.find({date:req.params.date},function(err,schedule)\n    {\n      if (err)\n      {\n        res.send(err);\n      }\n      res.json(schedule);\n      console.log('Schedule GET (date) Completed');\n    });\n  });\n\n\n  // create, get and delete schedule for period in a year\n  // - peroiod starts on week schedule_period and extends for 2 weeks\n  // - period must be an odd number and includes 1 e.g. 1,3,5,7 etc.\n\n  router.route('/schedules/:schedule_year/:schedule_period')\n\n    .post(function(req,res)\n    {\n      // create record\n      var query =  getEngineerIDs();\n      query.exec(function(err,records)\n      {\n        if(err) return console.log(err);\n        var results = SwfFn.populateCalendar(SwfFn.assignEngineers(records),+\n                      req.params.schedule_year,req.params.schedule_period);\n        if (results.length == 0 ) { console.log('Schedule not generated'); }\n        for (var count in results)\n        {\n          // Write record to Mongo using upsert; if records for future date already\n          // here then overwrite them otherwise insert. This is ok since the period\n          // is in the future\n          Schedule.findOneAndUpdate (\n            { ymd: results[count].ymd, shift: results[count].shift },\n            results[count],\n            {upsert: true, new: true, runValidators: true},\n            function (err,res) { if (err) res.send(err); }\n          );\n        }\n      });\n      console.log('Schedule POST(year/weekstart) Completed');\n      res.json({message: 'Schedule POST (year/weekstart) Completed'});\n    })\n\n    .get(function(req,res)\n    {\n      Schedule.find( { $and: [ { yr: req.params.schedule_year },{ wn:{$in:[req.params.schedule_period,parseInt(req.params.schedule_period)+1]}}]},\n      function(err,schedule)\n      {\n        if (err)\n        {\n          res.send(err);\n        }\n        res.json(schedule);\n        console.log('Schedule GET(year/weekstart) Completed');\n      });\n    })\n\n    .delete(function(req,res)\n    {\n      Schedule.remove( { $and: [ { yr: req.params.schedule_year },{ wn:{$in:[req.params.schedule_period,parseInt(req.params.schedule_period)+1]}}]},\n      function(err,schedule)\n      {\n        if (err) res.send(err);\n        console.log('Schedule DELETE(year/weekstart) Completed');\n        res.json({message: 'Schedule DELETE(year/weekstart) Completed'});\n      });\n      //console.log('Schedule GET Completed');\n    });\n\n// Get Engineer IDs\nfunction getEngineerIDs(){\n   var query = Engineer.find({},{empid:1, _id:0});\n   return query;\n}\n"]}