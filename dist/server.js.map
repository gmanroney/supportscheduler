{"version":3,"sources":["../src/server.js"],"names":["express","require","app","bodyParser","mongoose","moment","set","use","urlencoded","extended","json","port","process","env","PORT","Promise","global","connect","useMongoClient","router","Router","listen","console","log","Engineer","Refdate","Schedule","SwfFn","req","res","next","get","message","route","post","count","err","engineer","fname","body","lname","gender","empid","dob","start","save","send","find","findById","params","engineer_id","query","getEngineerIDs","exec","records","results","populateCalendar","assignEngineers","schedule_year","schedule_period","length","date","shift","ymd","findOneAndUpdate","upsert","new","runValidators","doc","wn","$in","parseInt","schedule","delete","remove","schedule_id","refdata","Refdata","isholiday","isweekend","weeknumber","movement","weeks","title","refdata_id","_id"],"mappings":"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","file":"server.js","sourcesContent":["// Import packages and initiate express app\nvar express = require('express');\nvar app = express();\nvar bodyParser = require('body-parser');\nvar mongoose = require('mongoose');\nvar moment=require('moment');\nmongoose.set('debug', true);\n//var currentWeekNumber = require('current-week-number');\n\n// Configure app for bodyParser() to let us grab data from the body of POST\napp.use(bodyParser.urlencoded({extended: true}));\napp.use(bodyParser.json());\n\n// Setup port for server to listen on (use PORT or 3000 if PORT not set)\nvar port = process.env.PORT || 3000;\n\n// Connecte to MongoDB\nmongoose.Promise = global.Promise;\nmongoose.connect('mongodb://localhost:27017/swf',{ useMongoClient: true });\n\n// Setup API routes (all to be prefixed with /api). All functions generated by router will be applied to our application\nvar router = express.Router();\napp.use('/api',router);\n\n// Start the server (environment variable or port 3000 if not defined)\napp.listen(port);\nconsole.log('Server listening on port ' + port);\n\n// ------------------------- BASIC SERVER CREATED --------------------- //\n\n// Add in schema objects\nvar Engineer = require ('../models/engineer');\nvar Refdate = require ('../models/refdate');\nvar Schedule = require ('../models/schedule');\n\n// Add in bespoke functions for application\nvar SwfFn = require(\"../functions/swf_functions.js\");\n\n// Middleware - useful for validation, logging or stopping request from cotinuing in event request is not safe\nrouter.use(function(req,res,next) {\n    console.log('Request received');\n     // move on to route; if not there request stops here.\n    next();\n});\n\n// Test Route (to see if everything is running)\nrouter.get('/', function(req,res) {\n  res.json({message: 'Welcome to the API'});\n});\n\n// ------------------------- API for Engineer --------------------- //\n// create engineer and get all engineers\nrouter.route('/engineers')\n\n  .post(function(req,res)\n  {\n    // Count number of records\n    Engineer.count({}, function(err, count)\n    {\n      console.log( \"Number of docs: \", count );\n      if (count > 10)\n      {\n        console.log(\"More than 10 engineers now; the 10 most senior engineers will be scheduled\" );\n      }\n    });\n    // create record\n    var engineer = new Engineer();\n    engineer.fname = req.body.fname;\n    engineer.lname = req.body.lname;\n    engineer.gender = req.body.gender;\n    engineer.empid = req.body.empid;\n    engineer.dob = req.body.dob;\n    engineer.start = req.body.start;\n\n    // save record\n    engineer.save(function(err)\n    {\n      // if error on save  output error otherwise print confirmation note\n      if (err)\n      {\n        res.send(err);\n      }\n      res.json({ message: \"Engineer record created\"});\n    });\n  })\n\n  .get(function(req,res)\n  {\n    Engineer.find(function(err,engineer)\n    {\n      if (err)\n      {\n        res.send(err);\n      }\n      res.json(engineer);\n    });\n  });\n\n// get engineer based on mongo ID\nrouter.route('/engineer/:engineer_id')\n\n  .get(function(req,res)\n  {\n    Engineer.findById(req.params.engineer_id,function(err,engineer)\n    {\n      if (err)\n      {\n        res.send(err);\n      }\n      res.json(engineer);\n    });\n  });\n\n// get engineer based on gender\nrouter.route('/engineer/gender/:gender')\n\n  .get(function(req,res)\n  {\n    // need to match attribute make in d/b to parameter in function; implicit for the _id lookup\n    Engineer.find({gender:req.params.gender},function(err,engineer)\n    {\n      if (err)\n      {\n        res.send(err);\n      }\n      res.json(engineer);\n    });\n  });\n\n// get engineer based on employee ID\nrouter.route('/engineer/empid/:empid')\n  .get(function(req,res)\n  {\n    Engineer.find({empid:req.params.empid},function(err,engineer)\n    {\n      if (err)\n      {\n        res.send(err);\n      }\n      res.json(engineer);\n    });\n  });\n\n// ------------------------- API for Schedule --------------------- //\n\n// create, get and delete schedule for period in a year\n// - peroiod starts on week schedule_period and extends for 2 weeks\n// - period must be an odd number and includes 1 e.g. 1,3,5,7 etc.\nrouter.route('/schedules/:schedule_year/:schedule_period')\n\n  .post(function(req,res)\n  {\n    // create record\n    var query =  getEngineerIDs();\n    query.exec(function(err,records)\n    {\n      if(err) return console.log(err);\n      var results = SwfFn.populateCalendar(SwfFn.assignEngineers(records),+\n                    req.params.schedule_year,req.params.schedule_period);\n      if (results.length == 0 ) { console.log('Schedule not generated') };\n      for (var count in results)\n      {\n        // Write record to Mongo using upsert; if records for future date already\n        // here then overwrite them otherwise insert. This is ok since the period\n        // is in the future\n        console.log('[received]',results[count].date,results[count].empid,results[count].shift,results[count].ymd);\n        Schedule.findOneAndUpdate (\n          { ymd: results[count].ymd, shift: results[count].shift },\n          results[count],\n          {upsert: true, new: true, runValidators: true},\n          function (err,doc) { if (err) res.send(err); }\n        )\n      };\n    });\n    console.log('Schedule POST Completed');\n    res.json({message: 'Schedule POST Completed'});\n  })\n\n  .get(function(req,res)\n  {\n    Schedule.find({wn:{$in:[req.params.schedule_period,parseInt(req.params.schedule_period)+1]}},\n    function(err,schedule)\n    {\n      if (err)\n      {\n        res.send(err);\n      };\n      res.json(schedule);\n      console.log('Schedule GET Completed');\n    });\n  })\n\n  .delete(function(req,res)\n  {\n    Schedule.remove({wn:{$in:[req.params.schedule_period,parseInt(req.params.schedule_period)+1]}},\n    function(err,schedule)\n    {\n      if (err) res.send(err);\n      res.json({message: 'Schedule DELETE Completed'});\n    });\n    //console.log('Schedule GET Completed');\n  });\n\n// get schedule based on mongo ID\nrouter.route('/schedule/:schedule_id')\n  .get(function(req,res)\n  {\n    Schedule.findById(req.params.schedule_id,function(err,schedule)\n    {\n      if (err)\n      {\n        res.send(err);\n      }\n      res.json(schedule);\n    });\n  });\n\n// get engineer based on employee ID\nrouter.route('/schedule/empid/:empid')\n  .get(function(req,res)\n  {\n    Schedule.find({empid:req.params.empid},function(err,schedule)\n    {\n      if (err)\n      {\n        res.send(err);\n      }\n      res.json(schedule);\n    });\n  });\n\n// get schedule based on date\nrouter.route('/schedule/date/:date')\n  .get(function(req,res)\n  {\n    Schedule.find({date:req.params.date},function(err,schedule)\n    {\n      if (err)\n      {\n        res.send(err);\n      }\n      res.json(schedule);\n    });\n  });\n\n// ------------------------- API for RefData --------------------- //\n// create reference data records with details of holidays to be used\n// in future to generate reports about when engineers provide support\n// on holiday dates.\nrouter.route('/refdatas')\n\n  .post(function(req,res)\n  {\n    // create record\n    var refdata = new Refdata();\n    refdata.date = req.body.date;\n    refdata.isholiday = req.body.isholiday;\n    refdata.isweekend = req.body.isweekend;\n    refdata.weeknumber = movement(refdata.date).weeks();\n    refdata.title = req.body.title;\n\n    // save record\n    refdata.save(function(err)\n    {\n      // Return error or confirm creation\n      if (err)\n      {\n        res.send(err);\n      }\n      res.json({ message: 'refdata record created'});\n    });\n  })\n\n  .get(function(req,res)\n  {\n    // Return error or refdata (error if no records found)\n    refdata.find(function(err,refdata)\n    {\n      if (err)\n      {\n        res.send(err);\n      }\n      res.json(refdata);\n    });\n  });\n\n// get refdata record by mongo ID\nrouter.route('/refdata/:refdata_id')\n\n  .get(function(req,res)\n  {\n    Refdata.findById(req.params.refdata_id,function(err,refdata)\n    {\n      if (err)\n      {\n        res.send(err);\n      }\n      res.json(refdata);\n    });\n  });\n\n// Get Engineer IDs\nfunction getEngineerIDs(){\n   var query = Engineer.find({},{empid:1, _id:0});\n   return query;\n}\n"]}