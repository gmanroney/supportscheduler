// Import packages and initiate express app
var express = require('express');
var app = express();
var bodyParser = require('body-parser');
var mongoose = require('mongoose');

// Configure app for bodyParser() to let us grab data from the body of POST
app.use(bodyParser.urlencoded({extended: true}));
app.use(bodyParser.json());

// Setup port for server to listen on (use PORT or 3000 if PORT not set)
var port = process.env.PORT || 3000;

// Connecte to MongoDB
mongoose.Promise = global.Promise;
mongoose.connect('mongodb://localhost:27017/swf',{ useMongoClient: true });

// Setup API routes (all to be prefixed with /api). All functions generated by router will be applied to our application
var router = express.Router();
app.use('/api',router);

// Start the server (environment variable or port 3000 if not defined)
app.listen(port);
console.log('Server listening on port ' + port);

// ------------------------- BASIC SERVER CREATED --------------------- //

// Add in schema objects
var Engineer = require ('./models/engineer');
var Refdate = require ('./models/refdate');
var Schedule = require ('./models/schedule');

// Middleware - useful for validation, logging or stopping request from cotinuing in event request is not safe
router.use(function(req,res,next) {
    console.log('Request received');
     // move on to route; if not there request stops here.
    next();
});

// Test Route (to see if everything is running)
router.get('/', function(req,res) {
  res.json({message: 'Welcome to the API'});
});

  // route for engineer create and retreive (all)
  router.route('/engineers')
    .post(function(req,res) {
      // create record
      var engineer = new Engineer();
      engineer.fname = req.body.fname;
      engineer.lname = req.body.lname;
      engineer.gender = req.body.gender;
      engineer.empid = req.body.empid;
      engineer.dob = req.body.dob;
      engineer.start = req.body.start;

      // save record
      engineer.save(function(err) {
        // if error on save  output error otherwise print confirmation note
        if (err) {
          res.send(err);
        }
        res.json({ message: 'engineer record created'});
      });
    })

    .get(function(req,res) {
      // Return error or list of engineers
      Engineer.find(function(err,engineer) {
        if (err) {
          res.send(err);
        }
        res.json(engineer);
      });
    });

  // route for engineer find by ID (database key)
  router.route('/engineer/:engineer_id')
    .get(function(req,res) {
      Engineer.findById(req.params.engineer_id,function(err,engineer) {
        if (err) {
          res.send(err);
        }
        res.json(engineer);
      });
    });

  // route for engineer find by gender
  router.route('/engineer/gender/:gender')
    .get(function(req,res) {
      // need to match attribute make in d/b to parameter in function; implicit for the _id lookup
      Engineer.find({gender:req.params.gender},function(err,engineer) {
        if (err) {
          res.send(err);
        }
        res.json(engineer);
      });
    });

    // route for engineer find by empid
    router.route('/engineer/empid/:empid')
      .get(function(req,res) {
        Engineer.find({empid:req.params.empid},function(err,engineer) {
          if (err) {
            res.send(err);
          }
          res.json(engineer);
        });
      });

      // route for schedule create and retreive (all)
      router.route('/schedules')
        .post(function(req,res) {
          // create record
          var schedule = new Schedule();
          schedule.empid = req.body.empid;
          schedule.date = req.body.date;
          schedule.shift = req.body.shift;

          // save record
          schedule.save(function(err) {
            // Return error or confirm creation
            if (err) {
              res.send(err);
            }
            res.json({ message: 'schedule record created'});
          });
        })

        .get(function(req,res) {
          Schedule.find(function(err,schedule) {
            if (err) {
              res.send(err);
            }
            res.json(schedule);
          });
        });

      // route for schedule find by ID (database key)
      router.route('/schedule/:schedule_id')
        .get(function(req,res) {
          Schedule.findById(req.params.schedule_id,function(err,schedule) {
            if (err) {
              res.send(err);
            }
            res.json(schedule);
          });
        });

      // route for schedule find by empid
      router.route('/schedule/empid/:empid')
        .get(function(req,res) {
          Schedule.find({empid:req.params.empid},function(err,schedule) {
            if (err) {
              res.send(err);
            }
            res.json(schedule);
          });
        });

        // route for schedule find by date
        router.route('/schedule/date/:date')
          .get(function(req,res) {
            Schedule.find({date:req.params.date},function(err,schedule) {
              if (err) {
                res.send(err);
              }
              res.json(schedule);
            });
          });

          // route for refdata create and retreive (all)
          router.route('/refdata')
            .post(function(req,res) {
              // create record
              var refdata = new Refdata();
              refdata.date = req.body.date;
              refdata.isholiday = req.body.isholiday;
              refdata.isweekend = req.body.isweekend;
              refdata.weeknumber = req.body.weeknumber;
              refdata.title = req.body.title;
              
              // save record
              refdata.save(function(err) {
                // Return error or confirm creation
                if (err) {
                  res.send(err);
                }
                res.json({ message: 'refdata record created'});
              });
            })

            // Return error or refdata (error if no records found)
            .get(function(req,res) {
              refdata.find(function(err,refdata) {
                if (err) {
                  res.send(err);
                }
                res.json(refdata);
              });
            });

          // route for refdata find by ID (database key)
          router.route('/refdata/:refdata_id')
            .get(function(req,res) {
              Refdata.findById(req.params.refdata_id,function(err,refdata) {
                if (err) {
                  res.send(err);
                }
                res.json(refdata);
              });
            });

          // route for refdata find by weeknumber
          router.route('/refdata/weeknumber/:weeknumber')
            .get(function(req,res) {
              Refdata.find({weeknumber:req.params.weeknumber},function(err,refdata) {
                if (err) {
                  res.send(err);
                }
                res.json(refdata);
              });
            });

            // route for refdata find by isholiday
            router.route('/refdata/isholiday/:isholiday')
              .get(function(req,res) {
                Refdata.find({isholiday:req.params.isholiday},function(err,refdata) {
                  if (err) {
                    res.send(err);
                  }
                  res.json(refdata);
                });
              });
