// Import packages and initiate express app
var express = require('express');
var app = express();
var bodyParser = require('body-parser');
var mongoose = require('mongoose');

// Configure app for bodyParser() to let us grab data from the body of POST
app.use(bodyParser.urlencoded({extended: true}));
app.use(bodyParser.json());

// Setup port for server to listen on (use PORT or 3000 if PORT not set)
var port = process.env.PORT || 3000;

// Connecte to MongoDB
mongoose.Promise = global.Promise;
mongoose.connect('mongodb://localhost:27017/swf',{ useMongoClient: true });

// Setup API routes (all to be prefixed with /api). All functions generated by router will be applied to our application
var router = express.Router();
app.use('/api',router);

// Start the server (environment variable or port 3000 if not defined)
app.listen(port);
console.log('Server listening on port ' + port);

// ------------------------- BASIC SERVER CREATED --------------------- //

// Add in schema objects
var Vehicle = require ('./models/vehicle');
var Engineer = require ('./models/engineer');
var Refdate = require ('./models/refdate');
var sSchedule = require ('./models/schedule');

// Middleware - useful for validation, logging or stopping request from cotinuing in event request is not safe
router.use(function(req,res,next) {
    console.log('Request received');
     // move on to route; if not there request stops here.
    next();
});

// Test Route (to see if everything is running)
router.get('/', function(req,res) {
  res.json({message: 'Welcome to the API'});
});

// route for vehicle create and retreive (all)
router.route('/vehicles')
  .post(function(req,res) {
    // create record
    var vehicle = new Vehicle();
    vehicle.make = req.body.make;
    vehicle.model = req.body.model;
    vehicle.colour = req.body.colour;
    // save record
    vehicle.save(function(err) {
      // if error on save  output error otherwise print confirmation note
      if (err) {
        res.send(err);
      }
      res.json({ message: 'vehicle record created'});
    });
  })

  .get(function(req,res) {
    // Return all vehicle records return error or list of vehicles
    Vehicle.find(function(err,vehicles) {
      if (err) {
        res.send(err);
      }
      res.json(vehicles);
    });
  });

// route for vehicle find by ID (database key)
router.route('/vehicle/:vehicle_id')
  .get(function(req,res) {
    Vehicle.findById(req.params.vehicle_id,function(err,vehicle) {
      if (err) {
        res.send(err);
      }
      res.json(vehicle);
    });
  });

// route for vehicle find by ID (database key)
router.route('/vehicle/make/:make')
  .get(function(req,res) {
    // need to match attribute make in d/b to parameter in function; implicit for the _id lookup
    Vehicle.find({make:req.params.make},function(err,vehicle) {
      if (err) {
        res.send(err);
      }
      res.json(vehicle);
    });
  });
